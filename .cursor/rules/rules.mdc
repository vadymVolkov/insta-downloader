---
alwaysApply: true
description: "Правила разработки REST API-сервиса для скачивания Instagram видео с использованием FastAPI"
---

You are an expert in Python, FastAPI, REST API design, and backend services development.

Проект представляет собой REST API-сервис, который:

- Принимает POST-запрос с JSON, содержащим ссылку на Instagram-пост
- Скачивает видео по этой ссылке с помощью сторонней библиотеки (например, instaloader)
- Извлекает информацию: автор, описание, дата публикации, комментарии и др.
- Сохраняет видеофайл в локальную директорию (например, media/)
- Возвращает JSON-ответ, содержащий:
  - имя автора
  - описание
  - дату публикации
  - список комментариев (автор + текст)
  - публичную ссылку на скачанное видео (`http://localhost/static/<filename>`)

## Архитектура

- `FastAPI` используется как backend
- API имеет один endpoint: `POST /api/download/`, который принимает тело `{ "url": "<insta-link>" }`
- Ответ содержит JSON с полями: `author`, `description`, `created_at`, `video_url`, `comments`
- Комментарии возвращаются в виде массива объектов `{ "user": "...", "text": "..." }`

## Принципы кодирования

- Все функции сопровождаются комментариями на английском языке, объясняющими их назначение
- Используется структура проекта FastAPI: `main.py`, `routers/`, `services/`, `schemas/`, `media/`, `static/`
- Бизнес-логика отделяется от маршрутов: парсинг и загрузка — в `services/`, API — в `routers/`
- Все входящие/исходящие данные валидируются через Pydantic-схемы
- Ссылки на видео возвращаются в формате `http://localhost/static/<имя_файла>`
- Файлы сохраняются под уникальными именами (например, UUID)
- Для отдачи файлов используется `StaticFiles`

## Правила разработки

- Всегда обрабатывай ошибки (например, если ссылка недоступна или формат неправильный)
- Не доверяй пользовательскому вводу: проверяй, что ссылка принадлежит Instagram
- Не добавляй дополнительный функционал, если пользователь этого явно не просил
- Проект должен оставаться минималистичным
- Не создавай UI, HTML-страницы, frontend или рендеринг шаблонов
- Не генерируй README, .env, requirements.txt и другие метафайлы без запроса
- Не реализовывай frontend-интеграцию или визуализацию

## Инструменты

- FastAPI
- instaloader или аналогичная библиотека
- Pydantic
- httpx/requests (если нужно)
- Uvicorn для запуска

## Тестирование (опционально)

- Если пользователь запросит тесты — использовать `pytest` и `httpx.AsyncClient`

## Конфигурация

Проект запускается на `localhost:8000`, видеофайлы доступны по `http://localhost/static/`.

## Примеры

### Запрос:
```http
POST /api/download
Content-Type: application/json

{
  "url": "https://www.instagram.com/reel/xyz/"
}
```

### Ответ:
```json
{
  "author": "username",
  "description": "описание видео",
  "created_at": "2023-10-01T14:23:00",
  "video_url": "http://localhost/static/video123.mp4",
  "comments": [
    {
      "user": "kommentator1",
      "text": "Комментарий 1"
    }
  ]
}
```
